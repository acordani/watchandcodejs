<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watch and Code JS</title>
  <subtitle>Practical Javascript</subtitle>
  <link href="/watchandcodejs/atom.xml" rel="self"/>
  
  <link href="http://sriramkswamy.github.io/watchandcodejs/"/>
  <updated>2016-08-17T21:58:01.000Z</updated>
  <id>http://sriramkswamy.github.io/watchandcodejs/</id>
  
  <author>
    <name>Sriram Krishnaswamy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Version 03</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-03/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-03/</id>
    <published>2016-08-17T21:42:22.000Z</published>
    <updated>2016-08-17T21:58:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This version is going to be about objects. Objects can be thought of properties/details about something. For example, your laptop/computer might have an operating system, purchase year and screen size and these can be listed as below -</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">operatingSystem Mac</div><div class="line">purchaseYear 2011</div><div class="line">screenSize 15 inches</div></pre></td></tr></table></figure>
<p>This example itself can be translated into JavaScript code like so -</p>
<figure class="highlight plain"><figcaption><span>[translated object]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    operatingSystem: &apos;Mac&apos;,</div><div class="line">    screenSize: &apos;15 inches&apos;,</div><div class="line">    purchaseYear: 2011</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note that 2011 is a number and hence can be left as such. We can assign this object to a variable.</p>
<figure class="highlight plain"><figcaption><span>[assigning an object to a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var myComputer = &#123;</div><div class="line">    operatingSystem: &apos;Mac&apos;,</div><div class="line">    screenSize: &apos;15 inches&apos;,</div><div class="line">    purchaseYear: 2011</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(&quot;Complete Object: &quot;, myComputer);</div><div class="line">console.log(&quot;Operating system: &quot;, myComputer.operatingSystem);</div><div class="line">console.log(&quot;Screen Size: &quot;, myComputer.screenSize);</div><div class="line">console.log(&quot;Purchase year: &quot;, myComputer.purchaseYear);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; Complete Object:  &#123; operatingSystem: &apos;Mac&apos;,</div><div class="line">&gt;   screenSize: &apos;15 inches&apos;,</div><div class="line">&gt;   purchaseYear: 2011 &#125;</div><div class="line">&gt; Operating system:  Mac</div><div class="line">&gt; Screen Size:  15 inches</div><div class="line">&gt; Purchase year:  2011</div></pre></td></tr></table></figure>
<p>You use an object when you basically want to group some related data. When to use an array and an object? <a href="http://stackoverflow.com/questions/4441139/when-to-use-an-object-or-an-array-in-javascript" target="_blank" rel="external">Check out this question</a>.</p>
<h2 id="Objects-and-functions"><a href="#Objects-and-functions" class="headerlink" title="Objects and functions"></a>Objects and functions</h2><p>Sometimes, we want the properties of the object to handle something slightly more complicated. The easiest way is by turning to functions. You can place a function in an object. Let’s consider the following object -</p>
<figure class="highlight plain"><figcaption><span>[functions inside objects]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gordon = &#123;</div><div class="line">    name: &apos;Gordon&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        console.log(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(gordon.sayName());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; &#123; name: &apos;Gordon&apos;, sayName: [Function] &#125;</div></pre></td></tr></table></figure>
<p>Note that we don’t give a name to this function inside an object because we can call it by the name of the property. Also, an important concept here is the <code>this</code> keyword. The <code>this</code> keyword is used by an object to refer itself. However, using just <code>this</code> in the ~console.log()~ prints out the entire object, which is not what we want. So let’s change it to display just a name.</p>
<figure class="highlight plain"><figcaption><span>[refining this keyword based log]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gordon = &#123;</div><div class="line">    name: &apos;Gordon&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(gordon.sayName());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Gordon</div></pre></td></tr></table></figure>
<p>This new ~console.log~ statement prints just the name. Now, for some terminologies. The kind of function written here, inside an object, is called a method and since it has no name, it is called an anonymous function. We call the anonymous function by its property.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>All the requirements for version 3 are built around objects</p>
<ul>
<li>[ ] It should store the todos array in an object</li>
<li>[ ] It should have a displayTodos method</li>
<li>[ ] It should have a addTodo method</li>
<li>[ ] It should have a changeTodo method</li>
<li>[ ] It should have a deleteTodo method</li>
</ul>
<h2 id="Storing-TODOs-array-in-an-object"><a href="#Storing-TODOs-array-in-an-object" class="headerlink" title="Storing TODOs array in an object"></a>Storing TODOs array in an object</h2><p>Let’s recreate what we did in the previous steps but try to use objects this time.</p>
<figure class="highlight plain"><figcaption><span>[storing the todos]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var todoList = &#123;</div><div class="line">    todos: [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(todoList);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; &#123; todos: [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ] &#125;</div></pre></td></tr></table></figure>
<p>That’s it for storing todos. The important thing to remember here is that there is no semicolon (=;=) after the property is defined inside an object.</p>
<h3 id="Updated-requirements"><a href="#Updated-requirements" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should store the todos array in an object</li>
<li>[ ] It should have a displayTodos method</li>
<li>[ ] It should have a addTodo method</li>
<li>[ ] It should have a changeTodo method</li>
<li>[ ] It should have a deleteTodo method</li>
</ul>
<h2 id="Displaying-TODOs-with-an-object"><a href="#Displaying-TODOs-with-an-object" class="headerlink" title="Displaying TODOs with an object"></a>Displaying TODOs with an object</h2><p>If you remember from our <a href="https://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/">previous attempt</a>, we tried to display the todo items with the help of a function. Here, we try to create a function within this new object based on the example discussed previously.</p>
<figure class="highlight plain"><figcaption><span>[creating a anonymous function to display todos]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var todoList = &#123;</div><div class="line">    todos: [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;],</div><div class="line">    displayTodos: function() &#123;</div><div class="line">        console.log(&apos;My Todos: &apos;, this.todos);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(todoList.displayTodos());</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-1"><a href="#Updated-requirements-1" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should store the todos array in an object</li>
<li>[X] It should have a displayTodos method</li>
<li>[ ] It should have a addTodo method</li>
<li>[ ] It should have a changeTodo method</li>
<li>[ ] It should have a deleteTodo method</li>
</ul>
<h2 id="Adding-TODOs-with-an-object"><a href="#Adding-TODOs-with-an-object" class="headerlink" title="Adding TODOs with an object"></a>Adding TODOs with an object</h2><p>Just like the previous section, we take our <a href="https://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/">previously defined function</a> and fit it into the object.</p>
<figure class="highlight plain"><figcaption><span>[creating a anonymous function to add todos]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var todoList = &#123;</div><div class="line">    todos: [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;],</div><div class="line">    displayTodos: function() &#123;</div><div class="line">        console.log(&apos;My Todos: &apos;, this.todos);</div><div class="line">    &#125;,</div><div class="line">    addTodo: function(todo) &#123;</div><div class="line">        this.todos.push(todo);</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(todoList.addTodo(&apos;plunker&apos;));</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;plunker&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-2"><a href="#Updated-requirements-2" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should store the todos array in an object</li>
<li>[X] It should have a displayTodos method</li>
<li>[X] It should have a addTodo method</li>
<li>[ ] It should have a changeTodo method</li>
<li>[ ] It should have a deleteTodo method</li>
</ul>
<h2 id="Changing-a-TODO-with-an-object"><a href="#Changing-a-TODO-with-an-object" class="headerlink" title="Changing a TODO with an object"></a>Changing a TODO with an object</h2><p>We are going to create an anonymous function for this new object based on our <a href="https://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/">previous function</a>.</p>
<figure class="highlight plain"><figcaption><span>[creating an anonymous function to change todos based on position]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var todoList = &#123;</div><div class="line">    todos: [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;],</div><div class="line">    displayTodos: function() &#123;</div><div class="line">        console.log(&apos;My Todos: &apos;, this.todos);</div><div class="line">    &#125;,</div><div class="line">    addTodo: function(todo) &#123;</div><div class="line">        this.todos.push(todo);</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;,</div><div class="line">    changeTodo: function(position, newValue) &#123;</div><div class="line">        this.todos[position] = newValue;</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(todoList.changeTodo(0, &apos;first&apos;));</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;first&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-3"><a href="#Updated-requirements-3" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should store the todos array in an object</li>
<li>[X] It should have a displayTodos method</li>
<li>[X] It should have a addTodo method</li>
<li>[X] It should have a changeTodo method</li>
<li>[ ] It should have a deleteTodo method</li>
</ul>
<h2 id="Deleting-a-TODO-with-an-object"><a href="#Deleting-a-TODO-with-an-object" class="headerlink" title="Deleting a TODO with an object"></a>Deleting a TODO with an object</h2><p>Hopefully, you are starting to see a pattern here. Let’s continue that by using our <a href="https://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/">deleteTodo function</a>.</p>
<figure class="highlight plain"><figcaption><span>[creating an anonymous function to delete a todo]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var todoList = &#123;</div><div class="line">    todos: [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;],</div><div class="line">    displayTodos: function() &#123;</div><div class="line">        console.log(&apos;My Todos: &apos;, this.todos);</div><div class="line">    &#125;,</div><div class="line">    addTodo: function(todo) &#123;</div><div class="line">        this.todos.push(todo);</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;,</div><div class="line">    changeTodo: function(position, newValue) &#123;</div><div class="line">        this.todos[position] = newValue;</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;,</div><div class="line">    deleteTodo: function(position) &#123;</div><div class="line">        this.todos.splice(position, 1);</div><div class="line">        this.displayTodos();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(todoList.deleteTodo(1));</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-4"><a href="#Updated-requirements-4" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should store the todos array in an object</li>
<li>[X] It should have a displayTodos method</li>
<li>[X] It should have a addTodo method</li>
<li>[X] It should have a changeTodo method</li>
<li>[X] It should have a deleteTodo method</li>
</ul>
<h2 id="Version-3-conclusions"><a href="#Version-3-conclusions" class="headerlink" title="Version 3 conclusions"></a>Version 3 conclusions</h2><p>We have met all the requirements and although the code is small, having everything in an object is useful for organization. The key takeaway from this version is the <code>this</code> keyword. The final version of this code can be found in <a href="https://github.com/sriramkswamy/watchandcodejs/blob/master/code/version03.js" target="_blank" rel="external">version03.js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This version is going to be ab
    
    </summary>
    
      <category term="course" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/course/"/>
    
    
      <category term="chrome" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/chrome/"/>
    
      <category term="objects" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/objects/"/>
    
      <category term="plunker" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/plunker/"/>
    
  </entry>
  
  <entry>
    <title>Version 02</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-02/</id>
    <published>2016-08-17T21:20:27.000Z</published>
    <updated>2016-08-17T22:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>This version is going to be all about functions.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Functions are like recipes. It can take long list of instructions and give you some result. To understand this better, let’s try to write down the steps to make a turkey sandwich and then convert that into a function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">makeTurkeySandwich</div><div class="line">  Get one slice of bread.</div><div class="line">  Add turkey.</div><div class="line">  Put a slice of bread on top.</div></pre></td></tr></table></figure>
<p>The first important thing while converting this in to a function is the use of the <code>function</code> keyword. That’s how JavaScript knows it’s a function. The basic structure is shown below.</p>
<figure class="highlight plain"><figcaption><span>[english translated function]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function makeTurkeysandwich () &#123;</div><div class="line">    Get one slice of bread;</div><div class="line">    Add turkey;</div><div class="line">    Put a slice of bread on top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the opening and closing braces after the instructions and the semicolon instead of period. Of course, this is not a valid JavaScript code. So, evaluating this will give lots of errors. This is just for illustration purposes. Finally, if you want to call this function (just like how you tell someone to make a turkey sandwich after you tell them the recipe), you should use the following style for it.</p>
<figure class="highlight plain"><figcaption><span>[calling a function]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">makeTurkeySandwich()</div></pre></td></tr></table></figure>
<p>This will also result in errors but the important point to note is the parenthesis present in both when we defined the function and when we call it. We can talk about this later.</p>
<h2 id="Customizing-functions"><a href="#Customizing-functions" class="headerlink" title="Customizing functions"></a>Customizing functions</h2><p>The best situation to customize the recipe is when you need repetitive recipes. For example, making a turkey sandwich or a ham sandwich is pretty similar except for the filling. This is a good situation where we can tweak our recipe. Let’s write this new recipe.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">makeSandwichWith ________</div><div class="line">  Get one slice of bread.</div><div class="line">  Add ________.</div><div class="line">  Put a slice of bread on top.</div></pre></td></tr></table></figure>
<p>This avoids a lot of repetitiveness and makes our recipe flexible. Let’s try to use a similar style for our function. Here, instead of the blank - <code>____</code> - we have variables.</p>
<figure class="highlight plain"><figcaption><span>[function with argument]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function makeSandwichWith (filling) &#123;</div><div class="line">	Get one slice of bread;</div><div class="line">	Add filling;</div><div class="line">	Put a slice of bread on top;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This can be called by</p>
<figure class="highlight plain"><figcaption><span>[calling a function with argument]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">makeSandwichWith(ham)</div></pre></td></tr></table></figure>
<p>Now, this will create a recipe to make a ham sandwich. Note that, here when you write <code>ham</code>, you are implicitly telling that it’s a variable and when there is no such variable. However, if you want to insert the text “ham”, you need to do it within single quotes like so - <code>&#39;ham&#39;</code>.</p>
<p>The “filling” in the function definition is called a function parameter and the ‘ham’ that we input while calling it is called the function argument.</p>
<p>Note: Remember that we have used functions before. The ~console.log()~ is a function that takes multiple arguments.</p>
<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><p>All the requirements for version 2 are built around functions</p>
<ul>
<li>[ ] It should have a function to display TODOs</li>
<li>[ ] It should have a function to add TODOs</li>
<li>[ ] It should have a function to change TODOs</li>
<li>[ ] It should have a function to delete TODOs</li>
</ul>
<h2 id="Displaying-TODOs-with-a-function"><a href="#Displaying-TODOs-with-a-function" class="headerlink" title="Displaying TODOs with a function"></a>Displaying TODOs with a function</h2><p>To make a function that displays TODOs, we need some data to work with. So, let’s create a variable just like we did in version 1.</p>
<figure class="highlight plain"><figcaption><span>[display function]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;];</div><div class="line"></div><div class="line">function displayTodos() &#123;</div><div class="line">    console.log(&apos;My Todos: &apos;, todos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">displayTodos();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>There are a couple of points to note here. The semicolon rules are a bit fuzzy. Therefore, until we use a tool that helps us with that, let’s forget about the rules of semicolon. Secondly, note that this function takes no argument but still displays the todo items. This is because the variable to display - <code>todos</code> - is hard coded into the function. If there is no variable called <code>todos</code> in our code, this will throw an error.</p>
<h3 id="Updated-requirements"><a href="#Updated-requirements" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should have a function to display TODOs</li>
<li>[ ] It should have a function to add TODOs</li>
<li>[ ] It should have a function to change TODOs</li>
<li>[ ] It should have a function to delete TODOs</li>
</ul>
<h2 id="Adding-TODOs-with-a-function"><a href="#Adding-TODOs-with-a-function" class="headerlink" title="Adding TODOs with a function"></a>Adding TODOs with a function</h2><p>This takes a new todo item and adds it to our <code>todos</code> variable. For a start, let’s add a standard new item - “new todo”.</p>
<figure class="highlight plain"><figcaption><span>[function for adding a todo]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;];</div><div class="line"></div><div class="line">function displayTodos() &#123;</div><div class="line">    console.log(&apos;My Todos: &apos;, todos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addTodo() &#123;</div><div class="line">    todos.push(&apos;new todo&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">addTodo();</div><div class="line"></div><div class="line">displayTodos();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;new todo&apos; ]</div></pre></td></tr></table></figure>
<p>Now this snippet of code, adds a standard text for todo, but that’s not what we want. We want to add a custom text and this means we have to have the function ~addTodos()~ take a parameter for input.</p>
<figure class="highlight plain"><figcaption><span>[function for adding a todo with an argument]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;];</div><div class="line"></div><div class="line">function displayTodos() &#123;</div><div class="line">    console.log(&apos;My Todos: &apos;, todos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addTodo(todo) &#123;</div><div class="line">    todos.push(todo);</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">addTodo(&apos;hello there&apos;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div></pre></td></tr></table></figure>
<p>Note that when we use this version of <code>addTodo</code>, you need supply an argument which will customize it. Also, you can call a function inside another function like how we call <code>displayTodos</code> inside <code>addTodo</code>.</p>
<h3 id="Updated-requirements-1"><a href="#Updated-requirements-1" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should have a function to display TODOs</li>
<li>[X] It should have a function to add TODOs</li>
<li>[ ] It should have a function to change TODOs</li>
<li>[ ] It should have a function to delete TODOs</li>
</ul>
<h2 id="Changing-TODOs-with-a-function"><a href="#Changing-TODOs-with-a-function" class="headerlink" title="Changing TODOs with a function"></a>Changing TODOs with a function</h2><p>We would grab the variable of the todo item and change it. This strategy, however, will not work because we need flexibility.</p>
<figure class="highlight plain"><figcaption><span>[function for changing a todo given position]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;];</div><div class="line"></div><div class="line">function displayTodos() &#123;</div><div class="line">    console.log(&apos;My Todos: &apos;, todos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addTodo(todo) &#123;</div><div class="line">    todos.push(todo);</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function changeTodo(position, newValue) &#123;</div><div class="line">    todos[position] = newValue;</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">addTodo(&apos;hello there&apos;);</div><div class="line">changeTodo(0, &apos;changed&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div><div class="line">&gt; My Todos:  [ &apos;changed&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div></pre></td></tr></table></figure>
<p>Here, the first parameter is the index of the item we want to change and the second is what the changed item should be.</p>
<h3 id="Updated-requirements-2"><a href="#Updated-requirements-2" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should have a function to display TODOs</li>
<li>[X] It should have a function to add TODOs</li>
<li>[X] It should have a function to change TODOs</li>
<li>[ ] It should have a function to delete TODOs</li>
</ul>
<h2 id="Deleting-TODOs-with-a-function"><a href="#Deleting-TODOs-with-a-function" class="headerlink" title="Deleting TODOs with a function"></a>Deleting TODOs with a function</h2><p>This is going to be pretty straightforward. We just take the position for the parameter and use the <code>splice</code> function. An important note here is that we are going to delete only one item per call of the function. So, the second argument of <code>splice</code> command is always going to be 1.</p>
<figure class="highlight plain"><figcaption><span>[function for deleting a todo]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;];</div><div class="line"></div><div class="line">function displayTodos() &#123;</div><div class="line">    console.log(&apos;My Todos: &apos;, todos);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function addTodo(todo) &#123;</div><div class="line">    todos.push(todo);</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function changeTodo(position, newValue) &#123;</div><div class="line">    todos[position] = newValue;</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function deleteTodo(position) &#123;</div><div class="line">    todos.splice(position, 1);</div><div class="line">    displayTodos();</div><div class="line">&#125;</div><div class="line"></div><div class="line">addTodo(&apos;hello there&apos;);</div><div class="line">changeTodo(0, &apos;changed&apos;);</div><div class="line">deleteTodo(1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; My Todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div><div class="line">&gt; My Todos:  [ &apos;changed&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div><div class="line">&gt; My Todos:  [ &apos;changed&apos;, &apos;item 3&apos;, &apos;hello there&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-3"><a href="#Updated-requirements-3" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><ul>
<li>[X] It should have a function to display TODOs</li>
<li>[X] It should have a function to add TODOs</li>
<li>[X] It should have a function to change TODOs</li>
<li>[X] It should have a function to delete TODOs</li>
</ul>
<h2 id="Version-2-conclusions"><a href="#Version-2-conclusions" class="headerlink" title="Version 2 conclusions"></a>Version 2 conclusions</h2><p>Try to play around with all the functions with Chrome or any console. You can copy paste the code from the file <a href="https://github.com/sriramkswamy/watchandcodejs/blob/master/code/version02.js" target="_blank" rel="external">version02.js</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This version is going to be all about functions.&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction
    
    </summary>
    
      <category term="course" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/course/"/>
    
    
      <category term="chrome" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/chrome/"/>
    
      <category term="functions" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/functions/"/>
    
  </entry>
  
  <entry>
    <title>Version 01</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-01/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-01/</id>
    <published>2016-08-17T20:00:21.000Z</published>
    <updated>2016-08-17T21:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul>
<li>[ ] It should have a place to store TODOs</li>
<li>[ ] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Storing-TODOs"><a href="#Storing-TODOs" class="headerlink" title="Storing TODOs"></a>Storing TODOs</h2><p>To store TODOs, we use a JavaScript array. We would just write TODO items like a list -</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item 1, item 2, item 3</div></pre></td></tr></table></figure>
<p>The programming term for this kind of list is an array and a JavaScript array is given by -</p>
<figure class="highlight plain"><figcaption><span>[creating an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>However, this way of creating arrays is ephemeral and we lose the information as soon as we issue the command. To make sure we have access to this again, we store it in a variable, i.e., assign a name or a tag to it which can be referred to later.</p>
<p>The way to create a variable in JavaScript is -</p>
<figure class="highlight plain"><figcaption><span>[creating a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div></pre></td></tr></table></figure>
<p>This results in the following at the REPL.</p>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; undefined</div></pre></td></tr></table></figure>
<p>The <code>var</code> is the syntax for variable and the <code>todos</code> is the name of the variable. Notice that if you evaluate this, you will get <code>undefined</code> but that’s OK. Now, if you just type <code>todos</code> in a console, you should get the actual variable -</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements"><a href="#Updated-requirements" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to store our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[ ] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Displaying-TODOs"><a href="#Displaying-TODOs" class="headerlink" title="Displaying TODOs"></a>Displaying TODOs</h2><p>Here, we display the list of todo items simplistically.</p>
<p>The <code>console.log()</code> function, as the name suggests, logs in whatever the input is in to the console. We can use it like this -</p>
<figure class="highlight plain"><figcaption><span>[console.log function]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello, JavaScript!&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello, JavaScript!</div></pre></td></tr></table></figure>
<p>The <code>console.log()</code> function can take multiple arguments too.</p>
<figure class="highlight plain"><figcaption><span>[console.log with multiple arguments]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello there&quot;, &quot;JavaScript&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello there JavaScript</div></pre></td></tr></table></figure>
<p>Note that when the two strings were combined, <code>console.log()</code> added a space in between them automatically. If we do not want it to add a space, we use the following variant instead -</p>
<figure class="highlight plain"><figcaption><span>[console.log combining strings]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello there&quot; + &quot;JavaScript&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello thereJavaScript</div></pre></td></tr></table></figure>
<p>The <code>console.log()</code> function can also take variables. Let’s try and print our todo items via this function. Note that the variable <code>todos</code> should not be enclosed in quotes. If we do that, it will print the text <code>todos</code> instead.</p>
<figure class="highlight plain"><figcaption><span>[creating and printing a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>Let’s make this a little bit pretty.</p>
<figure class="highlight plain"><figcaption><span>[pretty printing a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">console.log(&quot;My todos: &quot;, todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>This ticks off the second requirement we have set.</p>
<h3 id="Updated-requirements-1"><a href="#Updated-requirements-1" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to display our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Adding-TODOs"><a href="#Adding-TODOs" class="headerlink" title="Adding TODOs"></a>Adding TODOs</h2><p>Since <code>todos</code> is a variable, it has some commands that it comes with. One of them is <code>push</code>. You use it in a similar way to <code>console.log</code>.</p>
<figure class="highlight plain"><figcaption><span>[push command]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">todos.push(&apos;item 4&apos;)</div><div class="line">todos.push(&apos;item 5&apos;)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos; ]</div></pre></td></tr></table></figure>
<p>Now, the <code>todos</code> variable has 5 items - the original 3 plus the 2 we just added. Note that the <code>push</code> function pushes to the end of the array.</p>
<h3 id="Updated-requirements-2"><a href="#Updated-requirements-2" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to display our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Changing-TODOs"><a href="#Changing-TODOs" class="headerlink" title="Changing TODOs"></a>Changing TODOs</h2><p>Now, the todo items list has 5 items. To change a todo item, we need a way to get a hold of a specific one. The important point to note here is that computers start counting from 0 instead of 1. So, when we want the first element, we actually type in 0 instead of 1.</p>
<figure class="highlight plain"><figcaption><span>[printing one element of an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">console.log(todos[2])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; item 3</div></pre></td></tr></table></figure>
<p>Now, as you can see calling <code>todo[2]</code> resulted in <code>item 3</code> and not <code>item 2</code>. Play around with this. To actually change this, we just grab the one we want and set it to another value.</p>
<figure class="highlight plain"><figcaption><span>[changing and printing a todo]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">todos[4] = &apos;item 5 updated&apos;</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>Notice that the last item is updated. Finally, trying to access an element that is outside the size limits will result in an error.</p>
<figure class="highlight plain"><figcaption><span>[accessing an out of bounds element]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">console.log(todos[6])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; undefined</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-3"><a href="#Updated-requirements-3" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to change our todo items.</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[X] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Delete-a-TODO"><a href="#Delete-a-TODO" class="headerlink" title="Delete a TODO"></a>Delete a TODO</h2><p>To delete a todo item, we use a built-in function like <code>push</code> - <code>splice</code>. The <code>splice</code> function takes two arguments - a number/index where we want to start deleting and another number to indicate how many items we want to delete.</p>
<figure class="highlight plain"><figcaption><span>[splicing an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos;]</div><div class="line">todos.splice(0, 1)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>Play around with this to get more familiarity. Note that trying to delete something that is out of bounds will cause an error.</p>
<figure class="highlight plain"><figcaption><span>[deleting out of bounds element]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos;]</div><div class="line">todos.splice(0, 1)</div><div class="line">// Now, there are only 4 elements in the array</div><div class="line">todos.splice(4, 1)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>The subtle point that the evaluation didn’t pick up is that the line <code>todos.splice(4, 1)</code> doesn’t return anything. It just returns a blank - <code>[]</code>. This might be a little confusing at first. So play around with it on Google Chrome’s console or a Node REPL.</p>
<h3 id="Updated-requirements-4"><a href="#Updated-requirements-4" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>We have accomplished whatever we set out for in Version 1.</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[X] It should have a way to change a TODO</li>
<li>[X] It should have a way to delete a TODO</li>
</ul>
<h2 id="Version-1-conclusions"><a href="#Version-1-conclusions" class="headerlink" title="Version 1 conclusions"></a>Version 1 conclusions</h2><p>Overview</p>
<ul>
<li>We learned how to use a variable (array in our case) to store the todo items and as a reference</li>
<li>We learned about the <code>console.log()</code> command for displaying items</li>
<li>We learned <code>push</code> command to add more todo items</li>
<li>We learned how computers count and how to access (and change) a specific todo item</li>
<li>We learned how to delete any item in an array using the <code>splice</code> command</li>
</ul>
<p>In this section we saw how to do a basic version 1 of this app. There are a lot more to arrays but these concepts gives enough knowledge to create the second version of the app.</p>
<p>Try to play around with all the functions with Chrome or any console. You can copy paste the code from the file <a href="https://github.com/sriramkswamy/watchandcodejs/blob/master/code/version01.js" target="_blank" rel="external">version01.js</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Requirements&quot;&gt;&lt;a href=&quot;#Requirements&quot; class=&quot;headerlink&quot; title=&quot;Requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[ ] It should have a pla
    
    </summary>
    
      <category term="course" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/course/"/>
    
    
      <category term="arrays" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/arrays/"/>
    
      <category term="chrome" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Introduction/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Introduction/</id>
    <published>2016-08-17T19:02:49.000Z</published>
    <updated>2016-08-17T20:32:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://watchandcode.com" target="_blank" rel="external">Watch and Code</a> is a new set of courses on Javascript started by <a href="https://twitter.com/gordon_zhu" target="_blank" rel="external">Gordon Zhu</a> to help beginners comprehend Javascript.</p>
<p>This blog follows the free course <a href="https://watchandcode.com/courses/practical-javascript" target="_blank" rel="external">Practical Javascript</a> which teaches the fundamentals of Javascript. For other courses, check out the courses under the <a href="http://watchandcode.com/courses" target="_blank" rel="external">premium</a> section.</p>
<p>The course follows Gordon Zhu as he teaches and creates a version of the <a href="http://todomvc.com" target="_blank" rel="external">TodoMVC app</a> in vanilla Javascript.</p>
<h2 id="How-to-use-this-blog"><a href="#How-to-use-this-blog" class="headerlink" title="How to use this blog"></a>How to use this blog</h2><p>It is strongly recommended that you go through the course and write/practice the code. This site contains all the code but is to be used as a reference/refresher for the course. This is <em>not</em> a substitute for the course. The blog is not written in the same flow as the courses, i.e., each blog post doesn’t not correspond to one video. Instead, each blog post will correspond to one logical chunk of the course.</p>
<p>I have also tried to add links to the actual videos whenever and wherever possible.</p>
<p>The most important point is reading the code blocks. Every result of the code will start with <code>&gt;</code> symbol, which is the prompt for the <a href="https://nodejs.org/en/" target="_blank" rel="external">Node JS</a> REPL. All the code blocks are evaluated using the same Node JS REPL. So, there might be a few differences as to how it is seen on the Google Chrome console.</p>
<h2 id="About-the-course"><a href="#About-the-course" class="headerlink" title="About the course"></a>About the course</h2><p>These are a few links motivating and discussing the need for the course. If you haven’t taken the course yet, these videos might be a good place to start.</p>
<p><a href="https://watchandcode.com/courses/practical-javascript/lectures/896960" target="_blank" rel="external">Why create this course?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900443" target="_blank" rel="external">About Gordon Zhu</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900182" target="_blank" rel="external">Is this course right for you?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900180" target="_blank" rel="external">What you will build?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900177" target="_blank" rel="external">The development process</a></p>
<h2 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h2><ul>
<li>Gordon Zhu hosts live office hours and their schedule can be found in the <a href="https://www.facebook.com/groups/514043678767094/" target="_blank" rel="external">Facebook Group</a></li>
<li>Of course, you can ask questions directly in the Facebook group</li>
<li>Commenting on each video is also a good way to ask questions too</li>
<li>If you are on a premium membership, there are Slack channels and email links</li>
</ul>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="external">Google Chrome browser</a> for initial stages</li>
<li><a href="http://plnkr.co" target="_blank" rel="external">Plunker</a> for later stages</li>
</ul>
<h2 id="About-this-blog"><a href="#About-this-blog" class="headerlink" title="About this blog"></a>About this blog</h2><p>This blog is generated with the help of a static site generator - <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> and hosted on <a href="https://pages.github.com" target="_blank" rel="external">GitHub pages</a>. It’s source can be found on <a href="https://github.com/sriramkswamy/watchandcodejs" target="_blank" rel="external">my GitHub repository</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://watchandcode.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Watch and Code&lt;/a&gt; is a new set of courses on Javascript started by &lt;a 
    
    </summary>
    
      <category term="meta" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/meta/"/>
    
    
      <category term="about" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/about/"/>
    
      <category term="intro" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/intro/"/>
    
  </entry>
  
</feed>
