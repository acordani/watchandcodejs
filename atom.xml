<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watch and Code JS</title>
  <subtitle>Practical Javascript</subtitle>
  <link href="/watchandcodejs/atom.xml" rel="self"/>
  
  <link href="http://sriramkswamy.github.io/watchandcodejs/"/>
  <updated>2016-08-17T21:18:47.000Z</updated>
  <id>http://sriramkswamy.github.io/watchandcodejs/</id>
  
  <author>
    <name>Sriram Krishnaswamy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Version 01</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-01/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Version-01/</id>
    <published>2016-08-17T20:00:21.000Z</published>
    <updated>2016-08-17T21:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul>
<li>[ ] It should have a place to store TODOs</li>
<li>[ ] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Storing-TODOs"><a href="#Storing-TODOs" class="headerlink" title="Storing TODOs"></a>Storing TODOs</h2><p>To store TODOs, we use a JavaScript array. We would just write TODO items like a list -</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">item 1, item 2, item 3</div></pre></td></tr></table></figure>
<p>The programming term for this kind of list is an array and a JavaScript array is given by -</p>
<figure class="highlight plain"><figcaption><span>[creating an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>However, this way of creating arrays is ephemeral and we lose the information as soon as we issue the command. To make sure we have access to this again, we store it in a variable, i.e., assign a name or a tag to it which can be referred to later.</p>
<p>The way to create a variable in JavaScript is -</p>
<figure class="highlight plain"><figcaption><span>[creating a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div></pre></td></tr></table></figure>
<p>This results in the following at the REPL.</p>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; undefined</div></pre></td></tr></table></figure>
<p>The <code>var</code> is the syntax for variable and the <code>todos</code> is the name of the variable. Notice that if you evaluate this, you will get <code>undefined</code> but that’s OK. Now, if you just type <code>todos</code> in a console, you should get the actual variable -</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements"><a href="#Updated-requirements" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to store our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[ ] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Displaying-TODOs"><a href="#Displaying-TODOs" class="headerlink" title="Displaying TODOs"></a>Displaying TODOs</h2><p>Here, we display the list of todo items simplistically.</p>
<p>The <code>console.log()</code> function, as the name suggests, logs in whatever the input is in to the console. We can use it like this -</p>
<figure class="highlight plain"><figcaption><span>[console.log function]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello, JavaScript!&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello, JavaScript!</div></pre></td></tr></table></figure>
<p>The <code>console.log()</code> function can take multiple arguments too.</p>
<figure class="highlight plain"><figcaption><span>[console.log with multiple arguments]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello there&quot;, &quot;JavaScript&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello there JavaScript</div></pre></td></tr></table></figure>
<p>Note that when the two strings were combined, <code>console.log()</code> added a space in between them automatically. If we do not want it to add a space, we use the following variant instead -</p>
<figure class="highlight plain"><figcaption><span>[console.log combining strings]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&quot;Hello there&quot; + &quot;JavaScript&quot;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; Hello thereJavaScript</div></pre></td></tr></table></figure>
<p>The <code>console.log()</code> function can also take variables. Let’s try and print our todo items via this function. Note that the variable <code>todos</code> should not be enclosed in quotes. If we do that, it will print the text <code>todos</code> instead.</p>
<figure class="highlight plain"><figcaption><span>[creating and printing a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>Let’s make this a little bit pretty.</p>
<figure class="highlight plain"><figcaption><span>[pretty printing a variable]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">console.log(&quot;My todos: &quot;, todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; My todos:  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos; ]</div></pre></td></tr></table></figure>
<p>This ticks off the second requirement we have set.</p>
<h3 id="Updated-requirements-1"><a href="#Updated-requirements-1" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to display our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[ ] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Adding-TODOs"><a href="#Adding-TODOs" class="headerlink" title="Adding TODOs"></a>Adding TODOs</h2><p>Since <code>todos</code> is a variable, it has some commands that it comes with. One of them is <code>push</code>. You use it in a similar way to <code>console.log</code>.</p>
<figure class="highlight plain"><figcaption><span>[push command]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;]</div><div class="line">todos.push(&apos;item 4&apos;)</div><div class="line">todos.push(&apos;item 5&apos;)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos; ]</div></pre></td></tr></table></figure>
<p>Now, the <code>todos</code> variable has 5 items - the original 3 plus the 2 we just added. Note that the <code>push</code> function pushes to the end of the array.</p>
<h3 id="Updated-requirements-2"><a href="#Updated-requirements-2" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to display our TODOs. Let’s update our requirements</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[ ] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Changing-TODOs"><a href="#Changing-TODOs" class="headerlink" title="Changing TODOs"></a>Changing TODOs</h2><p>Now, the todo items list has 5 items. To change a todo item, we need a way to get a hold of a specific one. The important point to note here is that computers start counting from 0 instead of 1. So, when we want the first element, we actually type in 0 instead of 1.</p>
<figure class="highlight plain"><figcaption><span>[printing one element of an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">console.log(todos[2])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; item 3</div></pre></td></tr></table></figure>
<p>Now, as you can see calling <code>todo[2]</code> resulted in <code>item 3</code> and not <code>item 2</code>. Play around with this. To actually change this, we just grab the one we want and set it to another value.</p>
<figure class="highlight plain"><figcaption><span>[changing and printing a todo]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">todos[4] = &apos;item 5 updated&apos;</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;  [ &apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>Notice that the last item is updated. Finally, trying to access an element that is outside the size limits will result in an error.</p>
<figure class="highlight plain"><figcaption><span>[accessing an out of bounds element]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5&apos;]</div><div class="line">console.log(todos[6])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; undefined</div></pre></td></tr></table></figure>
<h3 id="Updated-requirements-3"><a href="#Updated-requirements-3" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>Now, we have a simple way to change our todo items.</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[X] It should have a way to change a TODO</li>
<li>[ ] It should have a way to delete a TODO</li>
</ul>
<h2 id="Delete-a-TODO"><a href="#Delete-a-TODO" class="headerlink" title="Delete a TODO"></a>Delete a TODO</h2><p>To delete a todo item, we use a built-in function like <code>push</code> - <code>splice</code>. The <code>splice</code> function takes two arguments - a number/index where we want to start deleting and another number to indicate how many items we want to delete.</p>
<figure class="highlight plain"><figcaption><span>[splicing an array]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos;]</div><div class="line">todos.splice(0, 1)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>Play around with this to get more familiarity. Note that trying to delete something that is out of bounds will cause an error.</p>
<figure class="highlight plain"><figcaption><span>[deleting out of bounds element]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var todos = [&apos;item 1&apos;, &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos;]</div><div class="line">todos.splice(0, 1)</div><div class="line">// Now, there are only 4 elements in the array</div><div class="line">todos.splice(4, 1)</div><div class="line">console.log(todos)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>[result]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; [ &apos;item 2&apos;, &apos;item 3&apos;, &apos;item 4&apos;, &apos;item 5 updated&apos; ]</div></pre></td></tr></table></figure>
<p>The subtle point that the evaluation didn’t pick up is that the line <code>todos.splice(4, 1)</code> doesn’t return anything. It just returns a blank - <code>[]</code>. This might be a little confusing at first. So play around with it on Google Chrome’s console or a Node REPL.</p>
<h3 id="Updated-requirements-4"><a href="#Updated-requirements-4" class="headerlink" title="Updated requirements"></a>Updated requirements</h3><p>We have accomplished whatever we set out for in Version 1.</p>
<ul>
<li>[X] It should have a place to store TODOs</li>
<li>[X] It should have a way to display TODOs</li>
<li>[X] It should have a way to add new TODOs</li>
<li>[X] It should have a way to change a TODO</li>
<li>[X] It should have a way to delete a TODO</li>
</ul>
<h2 id="Version-1-conclusions"><a href="#Version-1-conclusions" class="headerlink" title="Version 1 conclusions"></a>Version 1 conclusions</h2><p>Overview</p>
<ul>
<li>We learned how to use a variable (array in our case) to store the todo items and as a reference</li>
<li>We learned about the <code>console.log()</code> command for displaying items</li>
<li>We learned <code>push</code> command to add more todo items</li>
<li>We learned how computers count and how to access (and change) a specific todo item</li>
<li>We learned how to delete any item in an array using the <code>splice</code> command</li>
</ul>
<p>In this section we saw how to do a basic version 1 of this app. There are a lot more to arrays but these concepts gives enough knowledge to create the second version of the app.</p>
<p>Try to play around with all the functions with Chrome or any console. You can copy paste the code from the file <a href="https://github.com/sriramkswamy/watchandcodejs/blob/master/code/version01.js" target="_blank" rel="external">version01.js</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Requirements&quot;&gt;&lt;a href=&quot;#Requirements&quot; class=&quot;headerlink&quot; title=&quot;Requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[ ] It should have a pla
    
    </summary>
    
      <category term="course" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/course/"/>
    
    
      <category term="arrays" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/arrays/"/>
    
      <category term="chrome" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Introduction/"/>
    <id>http://sriramkswamy.github.io/watchandcodejs/2016/08/17/Introduction/</id>
    <published>2016-08-17T19:02:49.000Z</published>
    <updated>2016-08-17T20:32:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://watchandcode.com" target="_blank" rel="external">Watch and Code</a> is a new set of courses on Javascript started by <a href="https://twitter.com/gordon_zhu" target="_blank" rel="external">Gordon Zhu</a> to help beginners comprehend Javascript.</p>
<p>This blog follows the free course <a href="https://watchandcode.com/courses/practical-javascript" target="_blank" rel="external">Practical Javascript</a> which teaches the fundamentals of Javascript. For other courses, check out the courses under the <a href="http://watchandcode.com/courses" target="_blank" rel="external">premium</a> section.</p>
<p>The course follows Gordon Zhu as he teaches and creates a version of the <a href="http://todomvc.com" target="_blank" rel="external">TodoMVC app</a> in vanilla Javascript.</p>
<h2 id="How-to-use-this-blog"><a href="#How-to-use-this-blog" class="headerlink" title="How to use this blog"></a>How to use this blog</h2><p>It is strongly recommended that you go through the course and write/practice the code. This site contains all the code but is to be used as a reference/refresher for the course. This is <em>not</em> a substitute for the course. The blog is not written in the same flow as the courses, i.e., each blog post doesn’t not correspond to one video. Instead, each blog post will correspond to one logical chunk of the course.</p>
<p>I have also tried to add links to the actual videos whenever and wherever possible.</p>
<p>The most important point is reading the code blocks. Every result of the code will start with <code>&gt;</code> symbol, which is the prompt for the <a href="https://nodejs.org/en/" target="_blank" rel="external">Node JS</a> REPL. All the code blocks are evaluated using the same Node JS REPL. So, there might be a few differences as to how it is seen on the Google Chrome console.</p>
<h2 id="About-the-course"><a href="#About-the-course" class="headerlink" title="About the course"></a>About the course</h2><p>These are a few links motivating and discussing the need for the course. If you haven’t taken the course yet, these videos might be a good place to start.</p>
<p><a href="https://watchandcode.com/courses/practical-javascript/lectures/896960" target="_blank" rel="external">Why create this course?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900443" target="_blank" rel="external">About Gordon Zhu</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900182" target="_blank" rel="external">Is this course right for you?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900180" target="_blank" rel="external">What you will build?</a><br><a href="https://watchandcode.com/courses/practical-javascript/lectures/900177" target="_blank" rel="external">The development process</a></p>
<h2 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h2><ul>
<li>Gordon Zhu hosts live office hours and their schedule can be found in the <a href="https://www.facebook.com/groups/514043678767094/" target="_blank" rel="external">Facebook Group</a></li>
<li>Of course, you can ask questions directly in the Facebook group</li>
<li>Commenting on each video is also a good way to ask questions too</li>
<li>If you are on a premium membership, there are Slack channels and email links</li>
</ul>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="external">Google Chrome browser</a> for initial stages</li>
<li><a href="http://plnkr.co" target="_blank" rel="external">Plunker</a> for later stages</li>
</ul>
<h2 id="About-this-blog"><a href="#About-this-blog" class="headerlink" title="About this blog"></a>About this blog</h2><p>This blog is generated with the help of a static site generator - <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> and hosted on <a href="https://pages.github.com" target="_blank" rel="external">GitHub pages</a>. It’s source can be found on <a href="https://github.com/sriramkswamy/watchandcodejs" target="_blank" rel="external">my GitHub repository</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://watchandcode.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Watch and Code&lt;/a&gt; is a new set of courses on Javascript started by &lt;a 
    
    </summary>
    
      <category term="meta" scheme="http://sriramkswamy.github.io/watchandcodejs/categories/meta/"/>
    
    
      <category term="about" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/about/"/>
    
      <category term="intro" scheme="http://sriramkswamy.github.io/watchandcodejs/tags/intro/"/>
    
  </entry>
  
</feed>
